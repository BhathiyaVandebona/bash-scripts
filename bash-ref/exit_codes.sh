#!/bin/bash

# in bash to check whether a command ran successfully, we can use the exit codes

# we can check the exist code of the command that ran previously by using the special enviornment variable $? 

echo "The exist code of the previous command is: $?"

# IF THIS CODE IS 0 THEN THE LAST COMMAND RAN SUCCESSFULLY 
# ANY VALUE OTHER THAN ZERO MEANS THAT THE LAST PROGRAM OR THE COMMAND DID NOT RUN SUCCESSFULLY

# Using exit codes can help reporting errors

# example 

# redirect the command output to the null file so that we don't get the lousy output
ls -al ./ >> /dev/null

if [ $? -eq 0 ]
then 
    echo "The previous command ran successfully"
else 
    echo "The previous command failed"
fi

# REMEMBER IN SCRIPTS WE RUN COMMANDS AND EACH COMMAND WE RUN WILL GIVE A EXIT CODE (SUCCESS OR FAILURE)
# BUT WHEN WE TAKE THE ERROR OF THE WHOLE SCRIPT AT LAST, WE GET THE EXIT CODE OF THE VERY LAST COMMAD
# THAT THE SCRIPT RAN. SO IF YOU WANT TO CHECK WHETHER THE SCRIPT SUCCESSFULLY RAN USING THE ERROR CODE
# AT THE VERY LAST STAGE IT WANT GIVE YOU WHAT YOU EXPECT, YOU HAVE TO CHECK FAILURES ONE BY ONE (COMAMND BY COMMAND)
# IF YOU WANT TO. OR THERE IS ANOTHER METHOD,

# SAY A COMMAND FAILED, THEN YOU CAN USE THE IF CONDITIONS TO CHECK THIS, (REMEMBER IN THE IF CONDITIONAL CHECK, A 
# COMMAND CALLED test IS BEING RUN, SO THIS COMMAND HAS AN EXIT CODE) THEN YOU CAN USE THE  exit COMMAND TO FORCE
# RETURN THE PROGRAM WITH AN EXIT CODE THAT WE WANT, WITH THIS THE EXIT CODE OF THE WHOLE SCRIPT CAN BE SET TO
# EITHER ZERO IF ALL THE OPERATIONS RAN PROPERLY AT THE LAST LINE OF THE SCRIPT OR YOU CAN EXIT WITH A NON-ZERO
# VALUE WHEN A COMMAND FAILED
# WHEN CALLING exit, ALL THE LINE AFTER exit WON'T BE EXECUTED 

